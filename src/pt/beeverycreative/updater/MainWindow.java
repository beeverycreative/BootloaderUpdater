package pt.beeverycreative.updater;

import pt.beeverycreative.updater.utils.ExtensionFilter;
import pt.beeverycreative.updater.utils.Filename;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author beevc
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * enum for fast/easy OS checking
     */
    public enum Platform {

        WINDOWS, MACOS9, MACOSX, LINUX, OTHER
    }

    private DefaultComboBoxModel comboData;

    private static Platform os;
    private String selectedFilePath;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setTitle("BEEVERYCREATIVE Bootloader Updater - v2.0.0");

        updateBtn.setEnabled(false);
        statusLabel.setText("");
        
        //Tries to load configuration file
        Properties prop = null;
		String propFilePath = "./config.properties";
        
		InputStream inputStream;
        try {
            inputStream = new FileInputStream(propFilePath);
            		
            prop = new Properties();
            prop.load(inputStream);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);            	
        }
        
        // Disable the file browsing
        if (prop != null) {            
            selectFileBtn.setEnabled(false);
            selectFileBtn.setVisible(false);
            String defaultBootloader = prop.getProperty("default.bootloader");
            
            selectedFilePath = "tools/" + defaultBootloader + ".bin";
            selectedFileLabel.setText(defaultBootloader);
            
        } else {
            selectedFileLabel1.setVisible(false);
            selectFileBtn.setEnabled(true);
            selectFileBtn.setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        portsCombo = new javax.swing.JComboBox();
        refreshBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        selectedFileLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        selectFileBtn = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        selectedFileLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        portsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Refresh" }));
        portsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsComboActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel3.setText(" Port:");

        updateBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        selectedFileLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        selectedFileLabel.setText("Please select a bootloader file.");

        selectFileBtn.setText("Browse...");
        selectFileBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                selectFileBtnMousePressed(evt);
            }
        });
        selectFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileBtnActionPerformed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        statusLabel.setText("Current Status");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(refreshBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(selectFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectedFileLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFileBtn)
                    .addComponent(selectedFileLabel))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshBtn)
                    .addComponent(portsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(updateBtn))
                .addGap(18, 18, 18)
                .addComponent(statusLabel)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(116, 116, 116))
        );

        selectedFileLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        selectedFileLabel1.setText("Selected bootloader:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedFileLabel1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectedFileLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Update button
     * 
     * @param evt 
     */
    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed

        statusLabel.setText("Updating bootloader...");

        ArrayList<String> comPorts = new ArrayList<>();

        // EX: lpcprog.exe -control -wipe -bin BEETHEFIRST-bootloader-3.3.0-beta+20130930163800.bin COM5 230400 12000
        //String line2run = "tools/lpcprog.exe -control -wipe -bin tools/BEETHEFIRST-bootloader-3.3.0-beta+20130930163800.bin " + comboData.getSelectedItem().toString() + " 230400 12000";
        String exec = null;
        if (os == Platform.LINUX) {
            exec = "tools/linux/lpc21isp -control -wipe -bin "+ this.selectedFilePath+" /dev/" + comboData.getSelectedItem().toString() + " 230400 12000";
        } else if (os == Platform.MACOSX) {
            exec = "tools/macos/lpc21isp -control -wipe -bin "+ this.selectedFilePath+" /dev/" + comboData.getSelectedItem().toString() + " 230400 12000";
        } else if (os == Platform.WINDOWS) {
            exec = "tools/lpcprog.exe -control -wipe -bin "+ this.selectedFilePath+" " + comboData.getSelectedItem().toString() + " 230400 12000";
        }

        if (exec != null) {
            try {
                refreshBtn.setEnabled(false);
                updateBtn.setEnabled(false);
                            
                Process pr = Runtime.getRuntime().exec(exec);

                try (BufferedReader in = new BufferedReader(new InputStreamReader(pr.getInputStream()))) {
                    String line;
                    while ((line = in.readLine()) != null) {
                        if (line.toLowerCase().contains("err")) {
                            comPorts.clear();
                            //jTextArea1.append("Err02: Call Support");
                            break;
                        }

                        System.out.println(line);

                        //If successfull
                        if (line.toLowerCase().contains("now launching the brand new code")) {

                            statusLabel.setText("Successfully updated.");
                        }
                    }

                    pr.waitFor();

                    //portsCombo.setModel(comboData);

                    if (!statusLabel.toString().contains("Successfully")) {
                        statusLabel.setText("Update failed.");
                    }
                }                
                        
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.err.println("Unable to determine the system platform to run the executable.");
        }
        
        refreshBtn.setEnabled(true);
        updateBtn.setEnabled(true);
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * Refresh button
     * 
     * @param evt 
     */
    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        Pattern p = null;
        
        if (os == Platform.LINUX) {
            String re1 = "(tty)";	// Word 1
            String re2 = "((?:[a-z][a-z]+))";	// Word 2
            String re3 = "(\\d+)";	// Integer Number 1
            p = Pattern.compile(re1 + re2 + re3, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            
        } else if (os == Platform.MACOSX) {
            String re1 = "(tty)";	// Word 1
            String re2 = ".usbserial-";	// Word 2
            String re3 = "((?:[a-zA-Z0-9]+))";	// Word 3
            p = Pattern.compile(re1 + re2 + re3, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            
        } else if (os == Platform.WINDOWS) {
            String re1 = "((?:[a-z][a-z]+))";	// Word 1
            String re2 = "(\\d+)";	// Integer 1
            String re3 = " <USB Serial Port>";	// Fixed string
            p = Pattern.compile(re1 + re2 + re3, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        }

        if (p != null) {
            ArrayList<String> comPorts = new ArrayList<>();

            try {
                Process pr = null;
                if (os == Platform.LINUX) {
                    pr = Runtime.getRuntime().exec("dmesg");
                } else if (os == Platform.MACOSX) {
                    pr = Runtime.getRuntime().exec("ls /dev");
                } else if (os == Platform.WINDOWS) {
                    pr = Runtime.getRuntime().exec("tools/Enumser.exe");
                }

                if (pr != null) {
                    
                    try (BufferedReader in = new BufferedReader(new InputStreamReader(pr.getInputStream()))) {
                        String line;
                        while ((line = in.readLine()) != null) {
                            System.out.println(line);
                            Matcher m = p.matcher(line);
                            if (m.find()) {
                                String port;
                                String p1 = m.group(1);
                                String p2 = m.group(2);
                                
                                if (os == Platform.LINUX) {
                                    String p3 = m.group(3);
                                    port = p1 + p2 + p3;
                                    
                                    System.out.println("found:" + port);

                                    if (line.contains("disconnected") & comPorts.contains(port)) {
                                        comPorts.remove(port);
                                    }

                                    if (!comPorts.contains(port) & line.contains("attached")) {

                                        comPorts.add(port);
                                        updateBtn.setEnabled(true);
                                    }
                                } else if (os == Platform.MACOSX){ //Mac
                                    port = p1 + ".usbserial-" + p2;
                                    
                                    System.out.println("found:" + port);
                                    
                                    if (!comPorts.contains(port)) {
                                        comPorts.add(port);
                                        updateBtn.setEnabled(true);
                                    }                                                                    
                                
                                } else if (os == Platform.WINDOWS){ //Windows 
                                    port = p1 + p2;
                                    
                                    System.out.println("found:" + port);
                                    
                                    if (!comPorts.contains(port)) {
                                        comPorts.add(port);
                                        updateBtn.setEnabled(true);
                                    }
                                    
                                }                                
                            }
                        }
                        pr.waitFor();
                        
                        if (comPorts.isEmpty()) {
                            comPorts.add("None found");
                            updateBtn.setEnabled(false);
                        }
                       
                        comboData = new DefaultComboBoxModel(comPorts.toArray());
                        portsCombo.setModel(comboData);
                        System.out.println("ok!");
                    }
                } else {
                    System.err.println("Error executing serial port reader command.");
                }
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                System.err.println("Error executing serial port reader command: " + ex.getMessage());
            }
        }  else {
            System.err.println("Unable to determine the system platform to run the executable.");
        }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void portsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portsComboActionPerformed

    private void selectFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectFileBtnActionPerformed

    private void selectFileBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectFileBtnMousePressed
        String filePath = this.selectFile();

        if (filePath != null) {

            Filename fn = new Filename(filePath, '/', '.');

            selectedFileLabel.setText(fn.filename());
            
            this.selectedFilePath = filePath;
        }
    }//GEN-LAST:event_selectFileBtnMousePressed

    /**
     * Select File to open. Supported type .bin
     *
     * @return path to file
     */
    private String selectFile() {
        File directory = new File(System.getProperty("user.home"));

        JFileChooser fc = new JFileChooser(directory);
        FileFilter defaultFilter;

        String[] extensions = {".bin"};
        fc.addChoosableFileFilter(defaultFilter = new ExtensionFilter(extensions, "BIN files"));
        fc.addChoosableFileFilter(new ExtensionFilter(".bin", "BIN files"));
        fc.setAcceptAllFileFilterUsed(true);
        fc.setFileFilter(defaultFilter);
        fc.setDialogTitle("Select a bootloader file...");
        fc.setDialogType(JFileChooser.OPEN_DIALOG);
        fc.setFileHidingEnabled(false);
        int rv = fc.showOpenDialog(this);
        if (rv == JFileChooser.APPROVE_OPTION) {
            //fc.getSelectedFile().getName();

            return fc.getSelectedFile().getAbsolutePath();
        } else {

            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //Detects OS platform
        String OS = System.getProperty("os.name").toLowerCase();
        if (OS.contains("win")) {
            os = Platform.WINDOWS;
        } else if (OS.contains("mac")) {
            os = Platform.MACOSX;
        } else if (OS.contains("nix") || OS.contains("nux") || OS.contains("aix")) {
            os = Platform.LINUX;
        } else {
            os = Platform.OTHER;
        }

        /* Set the Nimbus look and feel */
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox portsCombo;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton selectFileBtn;
    private javax.swing.JLabel selectedFileLabel;
    private javax.swing.JLabel selectedFileLabel1;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

}
